在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在Node环境中，一个.js文件就称之为一个模块（module）。使用模块有什么好处？最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括Node内置的模块和来自第三方的模块。使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。'use strict';

var s = 'Hello';

function greet(name) {
    console.log(s + ', ' + name + '!');
}

module.exports = greet;
'use strict';

// 引入hello模块:
var greet = require('./hello');

var s = 'Michael';

greet(s); // Hello, Michael!
var greet = require('./hello');
var greet = require('./hello'); // 不要忘了写相对目录!
如果只写模块名：var greet = require('hello');
module.js
    throw err;
          ^
Error: Cannot find module 'hello'
    at Function.Module._resolveFilename
    at Function.Module._load
    ...
    at Function.Module._load
    at Function.Module.runMain
遇到这个错误，你要检查：模块名是否写对了；模块文件是否存在；相对路径是否写对了。要在模块中对外输出变量，用：module.exports = variable;
输出的变量可以是任意对象、函数、数组等等。要引入其他模块输出的对象，用：var foo = require('other_module');
引入的对象具体是什么，取决于引入模块输出的对象。如果你想详细地了解CommonJS的模块实现原理，请继续往下阅读。如果不想了解，请直接跳到最后做练习。当我们编写JavaScript代码时，我们可以申明全局变量：var s = 'global';
也就是说，JavaScript语言本身并没有一种模块机制来保证不同模块可以使用相同的变量名。那Node.js是如何实现这一点的？其实要实现“模块”这个功能，并不需要语法层面的支持。Node.js也并不会增加任何JavaScript语法。实现“模块”功能的奥妙就在于JavaScript是一种函数式编程语言，它支持闭包。如果我们把一段JavaScript代码用一个函数包装起来，这段代码的所有“全局”变量就变成了函数内部的局部变量。var s = 'Hello';
var name = 'world';

console.log(s + ' ' + name + '!');
(function () {
    // 读取的hello.js代码:
    var s = 'Hello';
    var name = 'world';

    console.log(s + ' ' + name + '!');
    // hello.js代码结束
})();
所以，Node利用JavaScript的函数式编程的特性，轻而易举地实现了模块的隔离。// 准备module对象:
var module = {
    id: 'hello',
    exports: {}
};
var load = function (module) {
    // 读取的hello.js代码:
    function greet(name) {
        console.log('Hello, ' + name + '!');
    }

    module.exports = greet;
    // hello.js代码结束
    return module.exports;
};
var exported = load(module);
// 保存module:
save(module, exported);
module.exports = greet;
var greet = require('./hello');
以上是Node实现JavaScript模块的一个简单的原理介绍。很多时候，你会看到，在Node环境中，有两种方法可以在一个模块中输出变量：方法一：对module.exports赋值：// hello.js

function hello() {
    console.log('Hello, world!');
}

function greet(name) {
    console.log('Hello, ' + name + '!');
}

function hello() {
    console.log('Hello, world!');
}

module.exports = {
    hello: hello,
    greet: greet
};
方法二：直接使用exports：// hello.js

function hello() {
    console.log('Hello, world!');
}

function greet(name) {
    console.log('Hello, ' + name + '!');
}

function hello() {
    console.log('Hello, world!');
}

exports.hello = hello;
exports.greet = greet;
// 代码可以执行，但是模块并没有输出任何变量:
exports = {
    hello: hello,
    greet: greet
};
如果你对上面的写法感到十分困惑，不要着急，我们来分析Node的加载机制：var module = {
    id: 'hello',
    exports: {}
};
var load = function (exports, module) {
    // hello.js的文件内容
    ...
    // load函数返回:
    return module.exports;
};

var exported = load(module.exports, module);
exports.foo = function () { return 'foo'; };
exports.bar = function () { return 'bar'; };
也可以写：module.exports.foo = function () { return 'foo'; };
module.exports.bar = function () { return 'bar'; };
module.exports = function () { return 'foo'; };
module.exports = {
    foo: function () { return 'foo'; }
};
或者：module.exports = function () { return 'foo'; };
modulemodulehttps://github.com/michaelliao/learn-javascript/tree/master/samples/node/module