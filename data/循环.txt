要计算1+2+3，我们可以直接写表达式：>>> 1 + 2 + 3
6
要计算1+2+3+...+10，勉强也能写出来。但是，要计算1+2+3+...+10000，直接写表达式就不可能了。为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。Python的循环有两种，一种是for...in循环，依次把list或tuple中的每个元素迭代出来，看例子：names = ['Michael', 'Bob', 'Tracy']
for name in names:
    print(name)
Michael
Bob
Tracy
sum = 0
for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
    sum = sum + x
print(sum)
>>> list(range(5))
[0, 1, 2, 3, 4]
sum = 0
for x in range(101):
    sum = sum + x
print(sum)
请自行运行上述代码，看看结果是不是当年高斯同学心算出的5050。第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：sum = 0
n = 99
while n > 0:
    sum = sum + n
    n = n - 2
print(sum)

# -*- coding: utf-8 -*-
L = ['Bart', 'Lisa', 'Adam']
n = 1
while n <= 100:
    print(n)
    n = n + 1
print('END')
上面的代码可以打印出1~100。n = 1
while n <= 100:
    if n > 10: # 当n = 11时，条件满足，执行break语句
        break # break语句会结束当前循环
    print(n)
    n = n + 1
print('END')
n = 0
while n < 10:
    n = n + 1
    print(n)
n = 0
while n < 10:
    n = n + 1
    if n % 2 == 0: # 如果n是偶数，执行continue语句
        continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行
    print(n)
执行上面的代码可以看到，打印的不再是1～10，而是1，3，5，7，9。循环是让计算机做重复任务的有效的方法。请试写一个死循环程序。do_for.pydo_for.pyhttps://github.com/michaelliao/learn-python3/blob/master/samples/basic/do_for.pydo_while.pydo_while.pyhttps://github.com/michaelliao/learn-python3/blob/master/samples/basic/do_while.py